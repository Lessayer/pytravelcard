# 1 "libnfc/include/nfc/nfc.h"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 361 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "libnfc/include/nfc/nfc.h" 2
# 60 "libnfc/include/nfc/nfc.h"
# 1 "libnfc/include/nfc/nfc-types.h" 1
# 42 "libnfc/include/nfc/nfc-types.h"
typedef struct nfc_context nfc_context;




typedef struct nfc_device nfc_device;




typedef struct nfc_driver nfc_driver;




typedef char nfc_connstring[1024];




typedef enum {





  NP_TIMEOUT_COMMAND,






  NP_TIMEOUT_ATR,




  NP_TIMEOUT_COM,







  NP_HANDLE_CRC,







  NP_HANDLE_PARITY,


  NP_ACTIVATE_FIELD,



  NP_ACTIVATE_CRYPTO1,





  NP_INFINITE_SELECT,



  NP_ACCEPT_INVALID_FRAMES,






  NP_ACCEPT_MULTIPLE_FRAMES,







  NP_AUTO_ISO14443_4,

  NP_EASY_FRAMING,

  NP_FORCE_ISO14443_A,

  NP_FORCE_ISO14443_B,

  NP_FORCE_SPEED_106,
} nfc_property;


#pragma pack(1)





typedef enum {
  NDM_UNDEFINED = 0,
  NDM_PASSIVE,
  NDM_ACTIVE,
} nfc_dep_mode;





typedef struct {

  uint8_t abtNFCID3[10];

  uint8_t btDID;

  uint8_t btBS;

  uint8_t btBR;

  uint8_t btTO;

  uint8_t btPP;

  uint8_t abtGB[48];
  size_t szGB;

  nfc_dep_mode ndm;
} nfc_dep_info;





typedef struct {
  uint8_t abtAtqa[2];
  uint8_t btSak;
  size_t szUidLen;
  uint8_t abtUid[10];
  size_t szAtsLen;
  uint8_t abtAts[254];
} nfc_iso14443a_info;





typedef struct {
  size_t szLen;
  uint8_t btResCode;
  uint8_t abtId[8];
  uint8_t abtPad[8];
  uint8_t abtSysCode[2];
} nfc_felica_info;





typedef struct {

  uint8_t abtPupi[4];

  uint8_t abtApplicationData[4];

  uint8_t abtProtocolInfo[3];

  uint8_t ui8CardIdentifier;
} nfc_iso14443b_info;





typedef struct {

  uint8_t abtDIV[4];

  uint8_t btVerLog;

  uint8_t btConfig;

  size_t szAtrLen;
  uint8_t abtAtr[33];
} nfc_iso14443bi_info;





typedef struct {
  uint8_t abtUID[8];
} nfc_iso14443b2sr_info;





typedef struct {
  uint8_t abtUID[4];
  uint8_t btProdCode;
  uint8_t btFabCode;
} nfc_iso14443b2ct_info;





typedef struct {
  uint8_t btSensRes[2];
  uint8_t btId[4];
} nfc_jewel_info;





typedef struct {
  size_t szDataLen;
  uint8_t abtData[32];
} nfc_barcode_info;





typedef union {
  nfc_iso14443a_info nai;
  nfc_felica_info nfi;
  nfc_iso14443b_info nbi;
  nfc_iso14443bi_info nii;
  nfc_iso14443b2sr_info nsi;
  nfc_iso14443b2ct_info nci;
  nfc_jewel_info nji;
  nfc_barcode_info nti;
  nfc_dep_info ndi;
} nfc_target_info;





typedef enum {
  NBR_UNDEFINED = 0,
  NBR_106,
  NBR_212,
  NBR_424,
  NBR_847,
} nfc_baud_rate;





typedef enum {
  NMT_ISO14443A = 1,
  NMT_JEWEL,
  NMT_BARCODE,
  NMT_ISO14443B,
  NMT_ISO14443BI,
  NMT_ISO14443B2SR,
  NMT_ISO14443B2CT,
  NMT_FELICA,
  NMT_DEP,
} nfc_modulation_type;





typedef enum {
  N_TARGET,
  N_INITIATOR,
} nfc_mode;





typedef struct {
  nfc_modulation_type nmt;
  nfc_baud_rate nbr;
} nfc_modulation;





typedef struct {
  nfc_target_info nti;
  nfc_modulation nm;
} nfc_target;


#pragma pack()
# 61 "libnfc/include/nfc/nfc.h" 2
# 81 "libnfc/include/nfc/nfc.h"
           void nfc_init(nfc_context **context) ;
           void nfc_exit(nfc_context *context) ;
           int nfc_register_driver(const nfc_driver *driver);


           nfc_device *nfc_open(nfc_context *context, const nfc_connstring connstring) ;
           void nfc_close(nfc_device *pnd);
           int nfc_abort_command(nfc_device *pnd);
           size_t nfc_list_devices(nfc_context *context, nfc_connstring connstrings[], size_t connstrings_len) ;
           int nfc_idle(nfc_device *pnd);


           int nfc_initiator_init(nfc_device *pnd);
           int nfc_initiator_init_secure_element(nfc_device *pnd);
           int nfc_initiator_select_passive_target(nfc_device *pnd, const nfc_modulation nm, const uint8_t *pbtInitData, const size_t szInitData, nfc_target *pnt);
           int nfc_initiator_list_passive_targets(nfc_device *pnd, const nfc_modulation nm, nfc_target ant[], const size_t szTargets);
           int nfc_initiator_poll_target(nfc_device *pnd, const nfc_modulation *pnmTargetTypes, const size_t szTargetTypes, const uint8_t uiPollNr, const uint8_t uiPeriod, nfc_target *pnt);
           int nfc_initiator_select_dep_target(nfc_device *pnd, const nfc_dep_mode ndm, const nfc_baud_rate nbr, const nfc_dep_info *pndiInitiator, nfc_target *pnt, const int timeout);
           int nfc_initiator_poll_dep_target(nfc_device *pnd, const nfc_dep_mode ndm, const nfc_baud_rate nbr, const nfc_dep_info *pndiInitiator, nfc_target *pnt, const int timeout);
           int nfc_initiator_deselect_target(nfc_device *pnd);
           int nfc_initiator_transceive_bytes(nfc_device *pnd, const uint8_t *pbtTx, const size_t szTx, uint8_t *pbtRx, const size_t szRx, int timeout);
           int nfc_initiator_transceive_bits(nfc_device *pnd, const uint8_t *pbtTx, const size_t szTxBits, const uint8_t *pbtTxPar, uint8_t *pbtRx, const size_t szRx, uint8_t *pbtRxPar);
           int nfc_initiator_transceive_bytes_timed(nfc_device *pnd, const uint8_t *pbtTx, const size_t szTx, uint8_t *pbtRx, const size_t szRx, uint32_t *cycles);
           int nfc_initiator_transceive_bits_timed(nfc_device *pnd, const uint8_t *pbtTx, const size_t szTxBits, const uint8_t *pbtTxPar, uint8_t *pbtRx, const size_t szRx, uint8_t *pbtRxPar, uint32_t *cycles);
           int nfc_initiator_target_is_present(nfc_device *pnd, const nfc_target *pnt);


           int nfc_target_init(nfc_device *pnd, nfc_target *pnt, uint8_t *pbtRx, const size_t szRx, int timeout);
           int nfc_target_send_bytes(nfc_device *pnd, const uint8_t *pbtTx, const size_t szTx, int timeout);
           int nfc_target_receive_bytes(nfc_device *pnd, uint8_t *pbtRx, const size_t szRx, int timeout);
           int nfc_target_send_bits(nfc_device *pnd, const uint8_t *pbtTx, const size_t szTxBits, const uint8_t *pbtTxPar);
           int nfc_target_receive_bits(nfc_device *pnd, uint8_t *pbtRx, const size_t szRx, uint8_t *pbtRxPar);


           const char *nfc_strerror(const nfc_device *pnd);
           int nfc_strerror_r(const nfc_device *pnd, char *buf, size_t buflen);
           void nfc_perror(const nfc_device *pnd, const char *s);
           int nfc_device_get_last_error(const nfc_device *pnd);


           const char *nfc_device_get_name(nfc_device *pnd);
           const char *nfc_device_get_connstring(nfc_device *pnd);
           int nfc_device_get_supported_modulation(nfc_device *pnd, const nfc_mode mode, const nfc_modulation_type **const supported_mt);
           int nfc_device_get_supported_baud_rate(nfc_device *pnd, const nfc_modulation_type nmt, const nfc_baud_rate **const supported_br);
           int nfc_device_get_supported_baud_rate_target_mode(nfc_device *pnd, const nfc_modulation_type nmt, const nfc_baud_rate **const supported_br);


           int nfc_device_set_property_int(nfc_device *pnd, const nfc_property property, const int value);
           int nfc_device_set_property_bool(nfc_device *pnd, const nfc_property property, const bool bEnable);


           void iso14443a_crc(uint8_t *pbtData, size_t szLen, uint8_t *pbtCrc);
           void iso14443a_crc_append(uint8_t *pbtData, size_t szLen);
           void iso14443b_crc(uint8_t *pbtData, size_t szLen, uint8_t *pbtCrc);
           void iso14443b_crc_append(uint8_t *pbtData, size_t szLen);
           uint8_t *iso14443a_locate_historical_bytes(uint8_t *pbtAts, size_t szAts, size_t *pszTk);

           void nfc_free(void *p);
           const char *nfc_version(void);
           int nfc_device_get_information_about(nfc_device *pnd, char **buf);


           const char *str_nfc_modulation_type(const nfc_modulation_type nmt);
           const char *str_nfc_baud_rate(const nfc_baud_rate nbr);
           int str_nfc_target(char **buf, const nfc_target *pnt, bool verbose);
